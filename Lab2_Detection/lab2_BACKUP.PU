# -*- coding: utf-8 -*-
"""
Course: CS 4365/5354 [Computer Vision]
Author: Jose Perez [ID: 80473954]
Assignment: Lab 2
Instructor: Olac Fuentes
"""
from timeit import default_timer as timer
from PIL import Image
from pylab import *

from integral_hog import integral_sums_image

import numpy as np


# ========================= Constants =========================
# Image to look for the object of interest
interest_filename = "quijote1.jpg"

# Filenames of images to compare to
compare_filenames = np.array(["quijote2.jpg", "quijote3.jpg", "quijote4.jpg"])

# ========================= Object of Interest =========================
im_file = Image.open(interest_filename)
im = array(im_file)

# ========================= Region Selection =========================
top_left = array([2064, 918])
bottom_right = array([2552, 1674])

# ========================= Region Variables =========================
region_x = top_left[0]
region_y = top_left[1]
region_width = bottom_right[1] - top_left[1]
region_height = bottom_right[0] - top_left[0]
region_image = im[region_y:region_y+region_width, region_x:region_x+region_height]

# ========================= Calculations =========================
# Get the HOG of the selected region
image_integral_sums = integral_sums_image(im, top_left, bottom_right)
region_sums = zeros(12)
region_sums[:] = image_integral_sums[:, region_y+region_width, region_x+region_height]

# Go through the comparison images
for i in range(len(compare_filenames)):
    # Get a filename
    filename = compare_filenames[i]
    # Create an image from the file
    im_file_compare = Image.open(filename)
    

# Calculate the HOG of the entire image
# Also pick the highest cummulative magnitude channel
#compare_sums = integral_sums_image(im_compare[:,:,2], top_left, bottom_right)
compare_sums = image_integral_sums
        
# Find the best match
stride = 1
distance = sys.maxsize
best_match = (-1, -1)

print "Comparing..."
start_time = timer()

for x in range(1, compare_sums.shape[2]-1, stride):
    for y in range(1, compare_sums.shape[1]-1, stride):
        comp = compare_sums[:, y-1, x-1]
        
        if (region_sums.shape != comp.shape):
            continue
        
        #diff = sqrt(((region_sums - comp)**2).sum())
        diff = np.linalg.norm(region_sums  - comp)        
        
        if diff < distance:
            distance = diff
            best_match = (y, x)
    
end_time = timer()
print "Matching took ", end_time - start_time

fig = figure(2)
imshow(im_compare)
splot = fig.add_subplot(111)
import matplotlib.patches as patches
rect = patches.Rectangle((best_match[1]-region_height, best_match[0]-region_width),
                         region_height,
                         region_width,linewidth=1,edgecolor='r',facecolor='none')
splot.add_patch(rect)
show()